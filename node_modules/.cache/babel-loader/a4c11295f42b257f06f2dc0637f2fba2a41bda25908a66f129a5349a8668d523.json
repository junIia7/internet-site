{"ast":null,"code":"var _jsxFileName = \"D:\\\\site\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport \"./styles/app.css\";\nimport PostList from './components/PostList';\nimport PostForm from './components/PostForm';\nimport Login from './components/Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  let User;\n\n  // useEffect(() => {\n  //    // const SavedPosts = localStorage.getItem('qq'); // берем элемент из стораж\n\n  //   //  if (SavedPosts)\n  //    //     setPosts(JSON.parse(SavedPosts)); // парсим в строку все объекты\n\n  // }, []); // пустой массив, значит вызовется один раз\n\n  const savePosts = posts => {\n    if (User) localStorage.setItem(User.login, JSON.stringify(posts)); // кладем элемент в стораж\n  };\n\n  // const getPosts = (User) => {\n  //     let SavedPosts;\n  //     if(User)\n  //         SavedPosts = localStorage.getItem(User.login); // кладем элемент в стораж\n  //     else\n  //         SavedPosts = localStorage.getItem('qq');\n\n  //     if (SavedPosts)\n  //         setPosts(JSON.parse(SavedPosts)); // парсим в строку все объекты\n  // }\n\n  const createPost = newPost => {\n    if (newPost.title !== '' && newPost.body !== '') {\n      setPosts([...posts, newPost]); // задаем все элементы\n      savePosts([...posts, newPost]); // сохраняем все и последний\n    }\n  };\n\n  const removePost = post => {\n    setPosts(posts.filter(p => p.id !== post.id)); // задаем\n    savePosts(posts.filter(p => p.id !== post.id)); // сохраняем\n  };\n\n  const LoadData = user => {\n    getPosts(user);\n  };\n  const WrongPassword = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Login, {\n      AccessAllowed: LoadData,\n      AccessRestricted: WrongPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PostForm, {\n      create: createPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), posts.length !== 0 ? /*#__PURE__*/_jsxDEV(PostList, {\n      posts: posts,\n      title: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0434\\u0435\\u043B\",\n      remove: removePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontFamily: 'sans-serif',\n        textAlign: 'center'\n      },\n      children: \"\\u0414\\u0435\\u043B \\u043D\\u0435\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"QFg9xhJ0x9yrnvUQrdhfY5IZlDs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","PostList","PostForm","Login","jsxDEV","_jsxDEV","App","_s","posts","setPosts","User","savePosts","localStorage","setItem","login","JSON","stringify","createPost","newPost","title","body","removePost","post","filter","p","id","LoadData","user","getPosts","WrongPassword","className","children","AccessAllowed","AccessRestricted","fileName","_jsxFileName","lineNumber","columnNumber","create","length","remove","style","fontFamily","textAlign","_c","$RefreshReg$"],"sources":["D:/site/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport \"./styles/app.css\"\r\nimport PostList from './components/PostList';\r\nimport PostForm from './components/PostForm';\r\nimport Login from './components/Login';\r\n\r\nfunction App() {\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    let User;\r\n\r\n    // useEffect(() => {\r\n    //    // const SavedPosts = localStorage.getItem('qq'); // берем элемент из стораж\r\n\r\n    //   //  if (SavedPosts)\r\n    //    //     setPosts(JSON.parse(SavedPosts)); // парсим в строку все объекты\r\n\r\n    // }, []); // пустой массив, значит вызовется один раз\r\n\r\n    const savePosts = (posts) => {\r\n        if(User)\r\n            localStorage.setItem(User.login, JSON.stringify(posts)); // кладем элемент в стораж\r\n    }\r\n\r\n    // const getPosts = (User) => {\r\n    //     let SavedPosts;\r\n    //     if(User)\r\n    //         SavedPosts = localStorage.getItem(User.login); // кладем элемент в стораж\r\n    //     else\r\n    //         SavedPosts = localStorage.getItem('qq');\r\n\r\n    //     if (SavedPosts)\r\n    //         setPosts(JSON.parse(SavedPosts)); // парсим в строку все объекты\r\n    // }\r\n\r\n    const createPost = (newPost) => {\r\n        if (newPost.title !== '' && newPost.body !== '') { \r\n            setPosts([...posts, newPost]) // задаем все элементы\r\n            savePosts([...posts, newPost]); // сохраняем все и последний\r\n        }\r\n\r\n    }\r\n\r\n    const removePost = (post) => {\r\n        setPosts(posts.filter(p => p.id !== post.id)); // задаем\r\n        savePosts(posts.filter(p => p.id !== post.id)); // сохраняем\r\n    }\r\n\r\n    const LoadData = (user) => {\r\n        getPosts(user);\r\n    }\r\n\r\n    const WrongPassword = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            { \r\n            <Login AccessAllowed={LoadData} AccessRestricted={WrongPassword}/>\r\n            }\r\n            <PostForm create={createPost} />\r\n            {\r\n                posts.length !== 0\r\n                ?\r\n                <PostList posts={posts} title=\"Список дел\" remove={removePost} />\r\n                :\r\n                <h1 style={{ fontFamily: 'sans-serif', textAlign: 'center' }}>\r\n                    Дел нет\r\n                </h1>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAO,kBAAkB;AACzB,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEX,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,IAAIW,IAAI;;EAER;EACA;;EAEA;EACA;;EAEA;;EAEA,MAAMC,SAAS,GAAIH,KAAK,IAAK;IACzB,IAAGE,IAAI,EACHE,YAAY,CAACC,OAAO,CAACH,IAAI,CAACI,KAAK,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC;EACjE,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAMS,UAAU,GAAIC,OAAO,IAAK;IAC5B,IAAIA,OAAO,CAACC,KAAK,KAAK,EAAE,IAAID,OAAO,CAACE,IAAI,KAAK,EAAE,EAAE;MAC7CX,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEU,OAAO,CAAC,CAAC,EAAC;MAC9BP,SAAS,CAAC,CAAC,GAAGH,KAAK,EAAEU,OAAO,CAAC,CAAC,CAAC,CAAC;IACpC;EAEJ,CAAC;;EAED,MAAMG,UAAU,GAAIC,IAAI,IAAK;IACzBb,QAAQ,CAACD,KAAK,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKH,IAAI,CAACG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/Cd,SAAS,CAACH,KAAK,CAACe,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKH,IAAI,CAACG,EAAE,CAAC,CAAC,CAAC,CAAC;EACpD,CAAC;;EAED,MAAMC,QAAQ,GAAIC,IAAI,IAAK;IACvBC,QAAQ,CAACD,IAAI,CAAC;EAClB,CAAC;EAED,MAAME,aAAa,GAAGA,CAAA,KAAM,CAE5B,CAAC;EAED,oBACIxB,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAEhB1B,OAAA,CAACF,KAAK;MAAC6B,aAAa,EAAEN,QAAS;MAACO,gBAAgB,EAAEJ;IAAc;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAElEhC,OAAA,CAACH,QAAQ;MAACoC,MAAM,EAAErB;IAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE5B7B,KAAK,CAAC+B,MAAM,KAAK,CAAC,gBAElBlC,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA,KAAM;MAACW,KAAK,EAAC,yDAAY;MAACqB,MAAM,EAAEnB;IAAW;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEjEhC,OAAA;MAAIoC,KAAK,EAAE;QAAEC,UAAU,EAAE,YAAY;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAZ,QAAA,EAAC;IAE9D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAER,CAAC;AAEd;AAAC9B,EAAA,CAnEQD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAqEZ,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}