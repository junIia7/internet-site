{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport PostList from './components/PostList';\nimport PostForm from './components/PostForm';\nimport Login from './components/Login';\nimport \"./css/bootstrap.min.css\";\nimport \"./styles/app.css\";\nfunction App() {\n  _s();\n  const handleDrop = (e, targetColumn) => {\n    e.preventDefault();\n    const draggedItemId = +e.dataTransfer.getData('text/plain');\n    var draggedItem;\n    if (targetColumn == 'done') draggedItem = posts.find(item => item.id === draggedItemId);else draggedItem = donePosts.find(item => item.id === draggedItemId);\n    if (targetColumn === 'done' && draggedItem) {\n      setDonePosts([...donePosts, draggedItem]);\n      setPosts(posts.filter(item => item.id !== draggedItemId));\n    } else if (targetColumn === 'todo' && draggedItem) {\n      setPosts([...posts, draggedItem]);\n      setDonePosts(donePosts.filter(item => item.id !== draggedItemId));\n    }\n    if (draggedItem) draggedItem.completed = !draggedItem.completed;\n    savePosts([...posts, ...donePosts]);\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const [posts, setPosts] = useState([]);\n  const [donePosts, setDonePosts] = useState([]);\n  const [user, setUser] = useState({\n    login: '',\n    password: \"\"\n  });\n  const [islogin, setLogin] = useState(JSON.parse(localStorage.getItem('boollog:')) | false);\n  const [isPopupOpen, setPopupOpen] = useState(false);\n  useEffect(() => {\n    setUser(JSON.parse(localStorage.getItem('lastuser:')));\n    const stringuser = localStorage.getItem('lastuser:');\n    if (stringuser) {\n      const user = JSON.parse(stringuser);\n      getPosts(user);\n    }\n  }, []);\n  const getPosts = returneduser => {\n    let SavedPosts = null;\n    if (returneduser) SavedPosts = localStorage.getItem(JSON.stringify(returneduser)); // берем элемент из стораж\n    if (SavedPosts) {\n      const PostsArray = JSON.parse(SavedPosts);\n      var tempdonePosts = [];\n      var tempposts = [];\n      for (let i = 0; i < PostsArray.length; i++) {\n        if (PostsArray[i].completed) tempdonePosts.push(PostsArray[i]);else tempposts.push(PostsArray[i]);\n      }\n      setPosts(tempposts); // парсим в строку все объекты\n      setDonePosts(tempdonePosts);\n    } else {\n      setPosts([]);\n      setDonePosts([]);\n    }\n  };\n  const savePosts = posts => {\n    if (user) localStorage.setItem(JSON.stringify(user), JSON.stringify(posts)); // кладем элемент в стораж\n  };\n\n  const createPost = (newPost, posts, antiPosts, flag) => {\n    if (newPost.title !== '') {\n      if (newPost.completed === false) setPosts([...posts, newPost]); // задаем все элементы\n      else setDonePosts([...posts, newPost]);\n    }\n    if (flag) savePosts([...posts, newPost]);else savePosts([...posts, ...antiPosts]); // сохраняем все и последний\n  };\n\n  const removePost = (post, curPosts, antiPosts) => {\n    if (post.completed === true) setDonePosts(curPosts.filter(p => p.id !== post.id)); // задаем\n    else setPosts(curPosts.filter(p => p.id !== post.id)); // задаем\n    savePosts(antiPosts.concat(curPosts.filter(p => p.id !== post.id))); // сохраняем\n  };\n\n  const WrongPassword = () => {\n    alert('Неправильный пароль');\n  };\n}\n_s(App, \"oScorSZNP1pdUOEtg2yWCkTA0Xo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Button","PostList","PostForm","Login","App","_s","handleDrop","e","targetColumn","preventDefault","draggedItemId","dataTransfer","getData","draggedItem","posts","find","item","id","donePosts","setDonePosts","setPosts","filter","completed","savePosts","handleDragOver","user","setUser","login","password","islogin","setLogin","JSON","parse","localStorage","getItem","isPopupOpen","setPopupOpen","stringuser","getPosts","returneduser","SavedPosts","stringify","PostsArray","tempdonePosts","tempposts","i","length","push","setItem","createPost","newPost","antiPosts","flag","title","removePost","post","curPosts","p","concat","WrongPassword","alert","_c","$RefreshReg$"],"sources":["D:/site/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport PostList from './components/PostList';\r\nimport PostForm from './components/PostForm';\r\nimport Login from './components/Login';\r\nimport \"./css/bootstrap.min.css\";\r\nimport \"./styles/app.css\";\r\n\r\nfunction App() {\r\n\r\n    const handleDrop = (e, targetColumn) => {\r\n        e.preventDefault();\r\n        const draggedItemId = +e.dataTransfer.getData('text/plain');\r\n        var draggedItem;\r\n        if (targetColumn == 'done') \r\n            draggedItem = posts.find((item) => item.id === draggedItemId);\r\n        else\r\n            draggedItem = donePosts.find((item) => item.id === draggedItemId);\r\n\r\n      \r\n        if (targetColumn === 'done' && draggedItem) {\r\n            setDonePosts([...donePosts, draggedItem]);\r\n            setPosts(posts.filter((item) => item.id !== draggedItemId));\r\n        } \r\n        else if (targetColumn === 'todo' && draggedItem) {\r\n            setPosts([...posts, draggedItem]);\r\n            setDonePosts(donePosts.filter((item) => item.id !== draggedItemId));\r\n        }\r\n        if (draggedItem)\r\n            draggedItem.completed = !draggedItem.completed;\r\n\r\n        savePosts([...posts, ...donePosts]);\r\n    };\r\n\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [donePosts, setDonePosts] = useState([]);\r\n\r\n    const [user, setUser] = useState({ login: '', password: \"\" });\r\n    const [islogin, setLogin] = useState(JSON.parse(localStorage.getItem('boollog:')) | false);\r\n    const [isPopupOpen, setPopupOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setUser(JSON.parse(localStorage.getItem('lastuser:')));\r\n        const stringuser = localStorage.getItem('lastuser:');\r\n        if (stringuser) {\r\n            const user = JSON.parse(stringuser);\r\n            getPosts(user);\r\n        }\r\n    }, []);\r\n\r\n    const getPosts = (returneduser) => {\r\n        let SavedPosts = null;\r\n        if (returneduser)\r\n            SavedPosts = localStorage.getItem(JSON.stringify(returneduser)); // берем элемент из стораж\r\n        if (SavedPosts) {\r\n            const PostsArray = JSON.parse(SavedPosts);\r\n            var tempdonePosts = [];\r\n            var tempposts = [];\r\n            for (let i = 0; i < PostsArray.length; i++) {\r\n                if (PostsArray[i].completed)\r\n                    tempdonePosts.push(PostsArray[i]);\r\n                else\r\n                    tempposts.push(PostsArray[i]);\r\n            }\r\n            setPosts(tempposts); // парсим в строку все объекты\r\n            setDonePosts(tempdonePosts)\r\n        }\r\n        else {\r\n            setPosts([]);\r\n            setDonePosts([]);\r\n        }\r\n    }\r\n\r\n    const savePosts = (posts) => {\r\n        if (user)\r\n            localStorage.setItem(JSON.stringify(user), JSON.stringify(posts)); // кладем элемент в стораж\r\n    }\r\n\r\n    const createPost = (newPost, posts, antiPosts, flag) => {\r\n        if (newPost.title !== '') {\r\n            if (newPost.completed === false) \r\n                setPosts([...posts, newPost]); // задаем все элементы\r\n            else \r\n                setDonePosts([...posts, newPost]);\r\n        }\r\n        if (flag)\r\n            savePosts([...posts, newPost]);\r\n        else\r\n            savePosts([...posts, ...antiPosts]); // сохраняем все и последний\r\n    }\r\n\r\n    const removePost = (post, curPosts, antiPosts) => {\r\n        if (post.completed === true)\r\n            setDonePosts(curPosts.filter(p => p.id !== post.id)); // задаем\r\n        else\r\n            setPosts(curPosts.filter(p => p.id !== post.id)); // задаем\r\n        savePosts(antiPosts.concat(curPosts.filter(p => p.id !== post.id))); // сохраняем\r\n    }\r\n\r\n    const WrongPassword = () => {\r\n        alert('Неправильный пароль');\r\n    }\r\n\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}